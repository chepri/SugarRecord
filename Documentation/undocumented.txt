CoreData.swift
	public struct CoreData
	public struct CoreData
	public struct CoreData
	public struct CoreData
	public struct CoreData
	public struct CoreData { }
Store.swift
	case Named(String)
	case URL(NSURL)
	public var description: String
	public func ==(lhs: CoreData.Store, rhs: CoreData.Store) -> Bool
NSManagedObject.swift
	public static var entityName: String
Request.swift
	public struct Request<T>
	public struct Request&lt;T&gt;
	public struct Request&lt;T&gt;
CoreDataErrors.swift
	public enum Error: ErrorType
	case InvalidModel(CoreData.ObjectModel)
	case PersistenceStoreInitialization
ObjectModel.swift
	case Named(String, NSBundle)
	case Merged([NSBundle]?)
	case URL(NSURL)
	public var description: String
	public func ==(lhs: CoreData.ObjectModel, rhs: CoreData.ObjectModel) -> Bool
NSManagedObjectContext.swift
	public func fetch<T>(request: Request<T>) -> Result<[T], Error>
	public func insert<T>() -> Result<T, Error>
	public func remove<T>(objects: [T]) -> Result<Void, Error>
Error.swift
	public enum Error: ErrorType
	case WriteError
	case InvalidType
	case Nothing
Queue.swift
	case Main
	case Background
	case Custom(dispatch_queue_t)
RequestExtension.swift
	public init(predicate: NSPredicate)
	public init(sortDescriptor: NSSortDescriptor)
Storage.swift
	case CoreData
	case Realm
	func operation(operation: (context: Context, save: Saver) -> Void, completed: (() -> Void)?)
